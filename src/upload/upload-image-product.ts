import { Page } from "puppeteer";

const maxRetries = 3;
const waitTimeout = 6000; // 6s
async function confirmUploadWithRetry(page: Page) {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      // L·∫ßn ƒë·∫ßu ti√™n assume b·∫°n ƒë√£ click Upload tr∆∞·ªõc r·ªìi,
      // c√°c l·∫ßn sau n·∫øu c·∫ßn, b·∫°n c√≥ th·ªÉ click l·∫°i:
      if (attempt > 1) {
        console.log(`üîÑ Th·ª≠ l·∫°i l·∫ßn ${attempt}: click l·∫°i Upload`);
        await page.click('button.btnUpload:not(.disabled)');
        // ch·ªù chuy·ªÉn sang tr·∫°ng th√°i uploading
        await page.waitForSelector('button.btnUpload.disabled[disabled]', { timeout: waitTimeout });
      }

      // Ch·ªù Add text button xu·∫•t hi·ªán trong 6s
      await page.waitForSelector(
        'button.btn-sm.btn-primary:not(.btnUpload)',
        { timeout: waitTimeout }
      );

      console.log(`‚úÖ Upload th√†nh c√¥ng sau ${attempt} l·∫ßn th·ª≠!`);
      return; // tho√°t h√†m, kh·ªèi v√≤ng retry
    } catch (err: any) {
      if (err.name === 'TimeoutError') {
        console.warn(`‚ö†Ô∏è Timeout sau 6s l·∫ßn th·ª≠ ${attempt}`);
        if (attempt === maxRetries) {
          throw new Error(`Upload kh√¥ng th√†nh c√¥ng sau ${maxRetries} l·∫ßn th·ª≠`);
        }
        // optional: ƒë·ª£i m·ªôt kho·∫£ng nh·ªè tr∆∞·ªõc khi retry
        await new Promise(r => setTimeout(r, 10000));
      } else {
        // l·ªói kh√°c th√¨ kh√¥ng retry
        throw err;
      }
    }
  }
}

